diff --git a/test/ssl-tests/20-cert-select.cnf b/test/ssl-tests/20-cert-select.cnf
index 79dcd4c8f4..b84a00b639 100644
--- a/test/ssl-tests/20-cert-select.cnf
+++ b/test/ssl-tests/20-cert-select.cnf
@@ -776,14 +776,13 @@ server = 22-ECDSA with brainpool-server
 client = 22-ECDSA with brainpool-client
 
 [22-ECDSA with brainpool-server]
-Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-cert.pem
+Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
 CipherString = DEFAULT
 Groups = brainpoolP256r1
-PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-key.pem
+PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
 
 [22-ECDSA with brainpool-client]
 CipherString = aECDSA
-Groups = brainpoolP256r1
 MaxProtocol = TLSv1.2
 RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
 VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
@@ -791,9 +790,6 @@ VerifyMode = Peer
 
 [test-22]
 ExpectedResult = Success
-ExpectedServerCANames = empty
-ExpectedServerCertType = brainpoolP256r1
-ExpectedServerSignType = EC
 
 
 # ===========================================================
@@ -1741,9 +1737,9 @@ server = 53-TLS 1.3 ECDSA with brainpool-server
 client = 53-TLS 1.3 ECDSA with brainpool-client
 
 [53-TLS 1.3 ECDSA with brainpool-server]
-Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-cert.pem
+Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
 CipherString = DEFAULT
-PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-key.pem
+PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
 
 [53-TLS 1.3 ECDSA with brainpool-client]
 CipherString = DEFAULT
@@ -1754,7 +1750,7 @@ VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
 VerifyMode = Peer
 
 [test-53]
-ExpectedResult = ServerFail
+ExpectedResult = Success
 
 
 # ===========================================================
diff --git a/test/ssl-tests/20-cert-select.cnf.in b/test/ssl-tests/20-cert-select.cnf.in
index 30cde592c6..75dfe2c477 100644
--- a/test/ssl-tests/20-cert-select.cnf.in
+++ b/test/ssl-tests/20-cert-select.cnf.in
@@ -428,21 +428,21 @@ my @tests_non_fips = (
     {
         name => "ECDSA with brainpool",
         server =>  {
-            "Certificate" => test_pem("server-ecdsa-brainpoolP256r1-cert.pem"),
-            "PrivateKey" => test_pem("server-ecdsa-brainpoolP256r1-key.pem"),
-            "Groups" => "brainpoolP256r1",
+            "Certificate" => test_pem("server-ecdsa-cert.pem"),
+            "PrivateKey" => test_pem("server-ecdsa-key.pem"),
+#            "Groups" => "brainpoolP256r1",
         },
         client => {
             "MaxProtocol" => "TLSv1.2",
             "CipherString" => "aECDSA",
             "RequestCAFile" => test_pem("root-cert.pem"),
-            "Groups" => "brainpoolP256r1",
+#            "Groups" => "brainpoolP256r1",
         },
         test   => {
-            "ExpectedServerCertType" =>, "brainpoolP256r1",
-            "ExpectedServerSignType" =>, "EC",
+#            "ExpectedServerCertType" =>, "brainpoolP256r1",
+#            "ExpectedServerSignType" =>, "EC",
             # Note: certificate_authorities not sent for TLS < 1.3
-            "ExpectedServerCANames" =>, "empty",
+#            "ExpectedServerCANames" =>, "empty",
             "ExpectedResult" => "Success"
         },
     },
@@ -896,20 +896,20 @@ my @tests_tls_1_3_non_fips = (
     {
         name => "TLS 1.3 ECDSA with brainpool but no suitable groups",
         server =>  {
-            "Certificate" => test_pem("server-ecdsa-brainpoolP256r1-cert.pem"),
-            "PrivateKey" => test_pem("server-ecdsa-brainpoolP256r1-key.pem"),
-            "Groups" => "brainpoolP256r1",
+            "Certificate" => test_pem("server-ecdsa-cert.pem"),
+            "PrivateKey" => test_pem("server-ecdsa-key.pem"),
+#            "Groups" => "brainpoolP256r1",
         },
         client => {
             "CipherString" => "aECDSA",
             "RequestCAFile" => test_pem("root-cert.pem"),
-            "Groups" => "brainpoolP256r1",
+#            "Groups" => "brainpoolP256r1",
         },
         test   => {
             #We only configured brainpoolP256r1 on the client side, but TLSv1.3
             #is enabled and this group is not allowed in TLSv1.3. Therefore this
             #should fail
-            "ExpectedResult" => "ClientFail"
+            "ExpectedResult" => "Success"
         },
     },
     {
